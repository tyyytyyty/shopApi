# Laravel Shop API

Проект представляет собой интернет-магазин с каталогом товаров, корзиной и заказами, реализованным на Laravel.

## Функционал

### Каталог товаров:
- Товары с названием, описанием, категорией, ценой и дополнительными характеристиками.
- Возможность фильтрации товаров по разным категроиям.

### Корзина:
- Добавление товаров в корзину.
- Удаление товара из корзины.
- Изменение количества товара.
- Очистка корзины.

### Заказы:
- Оформление заказа.
- Поддержка авторизованных и неавторизованных пользователей.
- Просмотр заказов авторизованного пользователя.

### API:
- Авторизация через Laravel Sanctum.
- Методы для регистрации, авторизации и работы с корзиной, товарами и заказами.

---

## Требования

- PHP 8.1 или выше
- Composer
- MySQL 8.0 или выше
- Laravel 10
- Postman (для тестирования API)

---

## Установка

1. **Склонируйте репозиторий:**
   ```bash
   git clone https://github.com/ваш-репозиторий.git
   cd laravel-shop
2. **Установите зависимости:**
    ```bash
   composer install
3. Настройте файл .env: Скопируйте пример файла конфигурации и настройте подключение к базе данных.
    ```bash
   cp .env.example .env
    ```


Пример конфигурации:
   ```bash
    DB_CONNECTION=mysql
    DB_HOST=127.0.0.1
    DB_PORT=3306
    DB_DATABASE=laravel_shop
    DB_USERNAME=root
    DB_PASSWORD=
   ```
4. Создайте ключ приложения:
    ```bash
   php artisan key:generate
5. Запустите миграции и сидеры:
    ```bash
    php artisan migrate --seed
    ```
6. Запустите локальный сервер:
    ```bash
    php artisan serve
    ```

## Использование
### 1. Авторизация и регистрация
#### Регистрация: POST /api/register

```bash
{
    "name": "John Doe",
    "email": "john@example.com",
    "password": "password",
    "password_confirmation": "password"
}
```

#### Авторизация: POST /api/login

```bash
{
    "email": "john@example.com",
    "password": "password"
}
```

#### Заголовок для авторизованных запросов:

```bash
Authorization: Bearer {token}
```

### 2. Работа с категориями
#### Получение дерева категорий: GET /api/categories

### 3. Работа с товарами
#### Получение списка товаров: GET /api/products?category=2&price_min=100&price_max=500
#### Получение товара по slug: GET /api/products/{slug}

### 4. Работа с корзиной
#### Получение содержимого корзины: GET /api/cart
#### Добавление товара в корзину: POST /api/cart
```bash
{
    "product_id": 1,
    "quantity": 2
}
```

#### Изменение количества товара: PATCH /api/cart/{item_id}
```bash
{
    "quantity": 5
}
```
#### Удаление товара: DELETE /api/cart/{item_id}
#### Очистка корзины: DELETE /api/cart

### 5. Работа с заказами
#### Создание заказа: POST /api/orders

```bash
{
    "email": "test@example.com",
    "phone": "+1234567890"
}
```

#### Получение списка заказов авторизованного пользователя: GET /api/orders

## Запуск тестов

### Для проверки логики с использованием PHPUnit:

#### Запустите тесты:

```bash
php artisan test
```

## Структура базы данных
### Таблицы:

1. categories: Хранение категорий (иерархическая структура).
2. products: Хранение товаров.
3. attributes и product_attributes: Дополнительные характеристики товаров.
4. carts и cart_items: Корзина и товары в корзине.
5. orders и order_items: Заказы и товары в заказах.

